name: CD with Gradle

#  main 브랜치에 코드가 push 되었을 때 실행
on:
  push:
    branches: [ "main" ]

# 코드의 내용을 이 파일을 실행하여 action을 수행하는 주체(Github Actions에서 사용하는 VM)가 읽을 수 있도록 허용
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest # ubuntu 최신 버전에서 script를 실행
    steps:
    # 지정한 저장소(현재 REPO)에서 코드를 워크플로우 환경으로 가져오도록 하는 github action
    - uses: actions/checkout@v3

    # open jdk 17 버전 환경을 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: "adopt"

    # Github secrets로부터 데이터를 받아서, 워크 플로우에 파일을 생성
    - name: Make application.yml
      run: |
         mkdir -p ./src/main/resources
         echo "${{ secrets.PROPERTIES }}" > ./src/main/resources/application.yml
      shell: bash	 
     
    # gradle을 통해 소스를 빌드
    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew clean build -x test

    # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push
    # 이 때 사용되는 ${{ secrets.DOCKER_REPO }}/jungle-coders-backend 가 위에서 만든 도커 repository 
    - name: Docker build & push to docker repo
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/jungle-coders-backend .
        docker push ${{ secrets.DOCKER_REPO }}/jungle-coders-backend

    # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속하고, script를 실행
    # script의 내용은 도커의 기존 프로세스들을 제거하고, docker repo로부터 방금 위에서 push한 내용을 pull 받아 실행하는 것
    # 실행 시, docker-compose를 사용
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      id: deploy
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.KEY }}
        envs: GITHUB_SHA
        script: |
          sudo docker pull ${{ secrets.DOCKER_REPO }}/jungle-coders-backend
          sudo docker stop $(sudo docker ps -q) 2>/dev/null || true
          sudo docker run --name github-actions-demo --rm -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/jungle-coders-backend
          sudo docker system prune -f
